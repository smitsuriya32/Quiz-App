@model Exam_Management.Models.User

@{
    Layout = null;
    Scripts.Render("~/Content/bootstrap.min.css");
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Create</title>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            color: #fff;
        }


        .form-group {
            margin-bottom: 15px;
        }

        .form-control {
            background-color: #333;
            color: #fff;
            border: 1px solid #555;
        }

        input {
            width: 100%;
            display: inline-block;
        }

        .register {
            height: auto;
            width: 500px;
            display: block;
            justify-content: center;
            margin: 100px auto;
            background-color: rgba(200, 200, 200, 0.7);
            border-radius: 10px;
            padding: 20px;
        }

        .btnsGrp {
            margin-top: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .btn {
            width: 45%;
        }
    </style>
</head>
<body>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="register">
            <h1 class="text-dark">Register</h1>
            <hr />

            <div class="form-group">
                @Html.LabelFor(model => model.Username, htmlAttributes: new { @class = "control-label text-dark" })
                <span class="text-danger mx-1">*</span>
                @Html.EditorFor(model => model.Username, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label text-dark" })<span class="text-danger mx-1">*</span>
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "text-dark" })
                <span class="text-danger mx-1">*</span>
                @Html.DropDownListFor(model => model.Role, new SelectList(new[] { "Teacher", "Student" }), "-- Select Role --", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PasswordHash, htmlAttributes: new { @class = "control-label text-dark" })
                <span class="text-danger mx-1">*</span>
                @Html.EditorFor(model => model.PasswordHash, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PasswordHash, "", new { @class = "text-danger" })
            </div>

            <div class="form-group btnsGrp">
                @Html.ActionLink("Login", "Login", null, new { @class = "btn btn-primary " })
                <button type="submit" value="Register" class="btn btn-dark">Register</button>
            </div>
        </div>
    }
</body>
<script src="~/Scripts/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@if (TempData.ContainsKey("Registration") && (bool)TempData["Registration"] == true)
{
    <script>
        Swal.fire({
            position: "top-end",
            icon: "success",
            title: "Registration Successfull",
            showConfirmButton: false,
            timer: 1500
        });
    </script>
}
else if (TempData.ContainsKey("Registration") && (bool)TempData["Registration"] == false)
{
    <script>
        Swal.fire({
            position: "top-end",
            icon: "failure",
            title: "Please try again with different username or email",
            showConfirmButton: false,
            timer: 1500
        });
    </script>
}

@if(TempData.ContainsKey("UsernameInvalid") && (bool)TempData["UsernameInvalid"] == true)
{
<script>
    Swal.fire({
        position: "top-end",
        icon: "failure",
        title: "Username should not contain special characters",
        showConfirmButton: false,
        timer: 1500
    });
</script>
}


</html>
